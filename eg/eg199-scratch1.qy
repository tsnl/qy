pub hello: (I32) -> I32;
def hello (x) = do {
    x
};

pub wrongPhi: (Bool, I32, I32) -> I32;
def wrongPhi (b, x, y) = do {
    if (b) {x} else {y}
};

pub rightPhi: (Bool, I32, I32) -> I32;
def rightPhi (b, x, y) = do {
    if (b) {x} else {y}
};

def runWrongPhi() = do {
    val j = wrongPhi(true, 15, 32);
};

pub fibonacci: (x: I32) -> I32;
def fibonacci (x) = do {
    if (x == 0 or x == 1) {
        x
    } else {
        fibonacci(x - 1) + fibonacci(x - 2)
    }
};

type FibRes = (x: I32, y: I32);
pub better_fibonacci: (x: I32) -> I32;
pvt better_fibonacci_helper: (a: I32, b: I32) -> FibRes;
def better_fibonacci (x) = do {
    if (x == 0 or x == 1) {
        x
    } else {
        val res = better_fibonacci_helper(x, better_fibonacci(x - 1));
        res.y
    }
};
def better_fibonacci_helper (a, b) = do {
    val c = a + b;
    new FibRes(b, c)
};

def booleans () = do {
    val b1 = true;
    val b2 = false;
    val m = b1 or b2;
};

//
// Testing types output:
//

/*
type Vec2f = (
    x: f32,
    y: f32
);
val Point = (
    position: Vec3f,
    normal: Vec3f,
    uv: Vec2f
);
*/

/* FIXME: this example should produce a unification error because 
 * no implicit int->float conversion
pub main: () -> i32;
def main () = do {
    val v = vec3f(fibonacci(6), fibonacci(7), fibonacci(8));
    v.x
};
*/

type Vec2f = (x: F32, y: F32);
