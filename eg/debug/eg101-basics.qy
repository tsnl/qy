// Qy is a programming language ideal for prototyping quick17y.
//   - it uses the C type system with a few enhancements and RTTI.
//   - type specifiers are only needed for functions and type definitions.
//   - it uses a single-pass compiler for simplicity

// enums provided using 'const', which translates into preprocessor declarations
const: Int {
    EC_ALL_OK                 = 0;
    EC_BAD_CLI_ARGS           = 1 + pred!;
    EC_BAD_FILE_PATH          = 1 + pred!;
    EC_DETECTED_RUNTIME_ERROR = 1 + pred!;
};
const: UInt {
    WINDOW_FLAG_FULLSCREEN           = 0x1u;
    WINDOW_FLAG_FIXED_SIZE           = 2u * pred!;
    WINDOW_FLAG_HARDWARE_ACCELERATED = 2u * pred!;
};

// struct definitions: (enum, union are similar, but use '{...}' instead)
type Point = (pos: Vec3f);
type Vec3f = (x: Float, y: Float, z: Float);

// function definitions:
// NOTE: type inference fills in holes, so any arg/ret typespec can be completely
// omitted.

pub fn vec3f (x: Float, y: Float, z: Float) -> Vec3f = do {
    new Vec3f(x, y, z)
};

pub fn v3f_add (v1: Vec3f, v2: Vec3f) -> Vec3f = do {
    val vx = v1.x + v2.x;
    val vy = v1.y + v2.y;
    val vz = v1.z + v2.z;
    vec3f(vx, vy, vz)
};
pub fn v3f_scale (v: Vec3f, s: Float) -> Vec3f = do {
    val sx = v.x * s;
    val sy = v.y * s;
    val sz = v.z * s;
    vec3f(sx, sy, sz)
};
