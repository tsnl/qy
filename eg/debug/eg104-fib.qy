pub printFibUntil: (I32) -> Void;
def printFibUntil (n: I32): Void = do {
    if (n > 0) {
        printFibUntil(n - 1);
        pv1_printInt(n);
        pv1_printTab();
        pv1_printInt(fibonacci(n));
        pv1_printLine();
    };
};

const: I64 { n = 90L; };
const: I32 { n32 = 90; };
def fastPrintFibUntilN (): I32 = do {
    // TODO: replace with ArrayBox, make 'n' dynamic
    // TODO: switch to QSL

    // TODO: implement 'assert' based on symbolic logic
    // assert n > 1;

    val a = new MutArray[I64, n]();
    a.ptr(0) := 0L;
    a.ptr(1) := 1L;
    val i = push mut I64(2);
    while (*i < n) do {
        a.ptr(*i) := a.get(*i-1L) + a.get(*i-2L);
        pv1_printLong(*i);
        pv1_printTab();
        pv1_printLong(a.get(*i));
        pv1_printLine();
        i := *i+1L;
    };
    a.get(n-1L)
};

def main () = do {
    val v = new Vec3F(1.0f, 2.0f, 3.0f);
    val w = v3f_add(v, v);
    
    // val w = new Vec2f(13, 0);
    val f = fibonacci(new I32(w.x));
    
    // printInt(f);
    val short_run = false;
    // printFibUntil(if (short_run) {10} else {42});
    fastPrintFibUntilN();
    // val _ = printFibUntil(n32);

    0
};

