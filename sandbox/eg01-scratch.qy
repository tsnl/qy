pub x: i32;
val x: i32;

let x = 2;
let y = 4;

pub hello: (i32)=>i32;
def hello (x) {
    return x;
};

pub wrongPhi: (bool,i32,i32)=>i32;
def wrongPhi (b, x, y) {
    if b {
        return x;
    } else {
        return y;
    };
};

let w = hello(13);
let j = wrongPhi(true, 15, 32);

def fibonacci (x) {
    if x == 0 {
        return 0;
    } else if x == 1 {
        return 1;
    } else {
        return fibonacci(x - 1) + fibonacci(x - 2);
    };
};

let b1 = true;
let b2 = false;
let m = b1 or b2;

//
// Testing types output:
//

def Vec3f = struct {
    x: f32,
    y: f32,
    z: f32
};
def Vec2f = struct {
    x: f32,
    y: f32
};
def Point = struct {
    position: Vec3f,
    normal: Vec3f,
    uv: Vec2f
};