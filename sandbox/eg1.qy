homework = import ("homework.whatever");

filter_pts (num_pts, pts_arr) = {
    // NOTE: '=' is a general binding operator-- in Qy, '=' is an immutable binding
    // NOTE: id<...> indicates compile-time operation, may be lazy!
    out_pts = malloc(num_pts * sizeof<*pts_arr>);
    out_pts_count = alloca(type_attrib_size<int_t>);
    
    for i = 0; i < num_pts; i++ {
        pt = pts_arr[i];
        if abs(pt.x/pt.z - pt.y/pt.z) < MACHINE_EPSILON(type<*pts_arr>) {
            out_pts[out_pts_count] = pt;
            out_pts_count += 1;
        } else {
            
        };
    };
};

// Note that 'type<...>' returns a value.
// This is just a regular runtime operation, but since its inputs are pure, we can trust the compiler to optimize it
// away in an optimized build, or just translate to LLVM IR and execute it once in debug mode (faster than doing it in 
// Python)
MACHINE_EPSILON (data_type) = {
    if data_type == float32_t {
        return 0.05;
    };
    if data_type == float64_t {
        return 0.005;
    };
    panic "Unknown data-type for selecting MACHINE_EPSILON";
};
